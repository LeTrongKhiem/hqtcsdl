USE master
GO

IF EXISTS (SELECT name FROM sys.databases WHERE name = N'DormitoryManagement')
BEGIN
	ALTER DATABASE [DormitoryManagement] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
	DROP DATABASE IF EXISTS [DormitoryManagement]
END
GO

CREATE DATABASE [DormitoryManagement]
GO

USE [DormitoryManagement]
GO

-- TỈNH/ TP
CREATE TABLE [dbo].[PROVINCE] (
	[PROVINCE_ID] VARCHAR(2) NOT NULL,
	[PROVINCE_NAME] NVARCHAR(20) NOT NULL,
	[PROVINCE_TYPE] VARCHAR(1) NOT NULL,				-- C: thành phố trực thuộc trung ương, P: tỉnh

	CONSTRAINT [PK_PROVINCE] PRIMARY KEY([PROVINCE_ID]),
)
GO

-- HUYỆN/ QUẬN
CREATE TABLE [dbo].[DISTRICT] (
	[DISTRICT_ID] VARCHAR(3) NOT NULL,
	[DISTRICT_NAME] NVARCHAR(40) NOT NULL,
	[DISTRICT_TYPE] VARCHAR(1) NOT NULL, 				-- C: thành phố trực thuộc tỉnh, D: quận, H: huyện, T: thị xã
	[PROVINCE_ID] VARCHAR(2) NOT NULL,

	CONSTRAINT [PK_DISTRICT] PRIMARY KEY([DISTRICT_ID]),
	CONSTRAINT [FK_DISTRICT_PROVINCE] FOREIGN KEY ([PROVINCE_ID]) REFERENCES [PROVINCE]([PROVINCE_ID]),
)
GO

-- XÃ/ PHƯỜNG
CREATE TABLE [dbo].[COMMUNE] (
	[COMMUNE_ID] VARCHAR(5) NOT NULL,
	[COMMUNE_NAME] NVARCHAR(40) NOT NULL,
	[COMMUNE_TYPE] VARCHAR(1) NOT NULL, 				-- W: Phường, V: xã, T: thị trấn
	[PRIORITY] VARCHAR(6) NOT NULL DEFAULT N'KV3', 		-- độ ưu tiên (KV1, KV2, KV2-NT, KV3)
	[DISTRICT_ID] VARCHAR(3) NOT NULL,

	CONSTRAINT [PK_COMMUNE] PRIMARY KEY([COMMUNE_ID]),
	CONSTRAINT [FK_COMMUNE_DISTRICT] FOREIGN KEY ([DISTRICT_ID]) REFERENCES [DISTRICT]([DISTRICT_ID]),
)
GO


-- ĐỊA CHỈ
CREATE TABLE [dbo].[ADDRESS] (
	[ADDRESS_ID] BIGINT IDENTITY(1, 1),
	[STREET] NVARCHAR(50) NULL,
	[COMMNUNE_ID] VARCHAR(5) NOT NULL,
	[DISTRICT_ID] VARCHAR(3) NOT NULL,
	[PROVINCE_ID] VARCHAR(2) NOT NULL,

	CONSTRAINT [PK_ADDRESS] PRIMARY KEY([ADDRESS_ID]),
	CONSTRAINT [FK_ADDRESS_COMMUNE] FOREIGN KEY ([COMMNUNE_ID]) REFERENCES [COMMUNE]([COMMUNE_ID]),
	CONSTRAINT [FK_ADDRESS_DISTRICT] FOREIGN KEY ([DISTRICT_ID]) REFERENCES [DISTRICT]([DISTRICT_ID]),
	CONSTRAINT [FK_ADDRESS_PROVINCE] FOREIGN KEY ([PROVINCE_ID]) REFERENCES [PROVINCE]([PROVINCE_ID]),
)
GO

-- TRƯỜNG CAO ĐẲNG/ ĐẠI HỌC
CREATE TABLE [dbo].[COLLEGE] (
	[COLLEGE_ID] INT IDENTITY(1, 1) NOT NULL,
	[COLLEGE_CODE] VARCHAR(5) NULL, 				-- MÃ TRƯỜNG SPK, BKU
	[COLLEGE_NAME] NVARCHAR(100) NOT NULL,

	CONSTRAINT [PK_COLLEGE] PRIMARY KEY ([COLLEGE_ID])
)
GO

-- BẢO HIỂM Y TẾ
CREATE TABLE [dbo].[INSURANCE] (
	[INSURANCE_ID] VARCHAR(15) NOT NULL,
	[BASE_PRACTICE] NVARCHAR(50) NULL, 			-- NƠI ĐĂNG KÝ KHÁM CHỮA BỆNH BAN ĐẦU
	[REGISTRATION_DATE] DATE NULL,				-- NGÀY ĐĂNG KÝ
	[DURATION] INT NULL,						-- THỜI HẠN SỬ DỤNG (SỐ THÁNG)

	CONSTRAINT [PK_INSURANCE] PRIMARY KEY([INSURANCE_ID]),
)
GO

-- LƯU TÀI KHẢON ĐĂNG NHẬP VÀ THÔNG TIN NGƯỜI DÙNG
CREATE TABLE [dbo].[USER] (
	[USER_ID] BIGINT IDENTITY(1, 1) NOT NULL,
	[LAST_NAME] NVARCHAR(40) NOT NULL,
	[FIRST_NAME] NVARCHAR(20) NOT NULL,
	[DOB] DATE NOT NULL,								-- NGÀY SINH
	[GENDER] NVARCHAR(5) NOT NULL,						-- GIỚI TÍNH
	[SSN] VARCHAR(12) NULL, 							-- CHỨNG MINH NHÂN DÂN

	[ADDRESS_ID] BIGINT NOT NULL,
	[PHONE_NUMBER_1] VARCHAR(15) NULL,					-- SỐ ĐIỆN THOẠI 1
	[PHONE_NUMBER_2] VARCHAR(15) NULL,					-- SỐ ĐIỆN THOẠI 2
	[EMAIL] VARCHAR(40) NULL,
	[IMAGE_PATH] VARCHAR(300) NULL,

	[USERNAME] VARCHAR(16) NOT NULL,
	[PASSWORD] VARCHAR(32) NOT NULL,
	[USER_TYPE] VARCHAR(10) NOT NULL DEFAULT 'STUDENT',	-- ADMIN: TK QUẢN TRỊ, EMPLOYEE: NHÂN VIÊN, STUDENT: SINH VIÊN, RELATIVE: NGƯỜI THÂN
	[STATUS] BIT DEFAULT 1 NOT NULL
)
GO

ALTER TABLE dbo.[USER] ADD CONSTRAINT [PK_USER] PRIMARY KEY([USER_ID])
ALTER TABLE dbo.[USER] ADD CONSTRAINT [FK_USER_ADDRESS] FOREIGN KEY ([ADDRESS_ID]) REFERENCES [ADDRESS]([ADDRESS_ID])
ALTER TABLE dbo.[USER] ADD CONSTRAINT [USERNAME_UNINE] UNIQUE(USERNAME)
ALTER TABLE dbo.[USER] ADD CONSTRAINT [PK_UNIQUE] UNIQUE(SSN)
GO

-- Set nullable unique for column email
CREATE UNIQUE NONCLUSTERED INDEX IDX_USER_MAIL_Unique_Nullable ON [dbo].[User]([EMAIL]) WHERE [EMAIL] IS NOT NULL
CREATE UNIQUE NONCLUSTERED INDEX IDX_USER_PHONENUMBER1_Unique_Nullable ON [dbo].[USER]([PHONE_NUMBER_1]) WHERE [PHONE_NUMBER_1] IS NOT NULL
CREATE UNIQUE NONCLUSTERED INDEX IDX_USER_PHONENUMBER2_Unique_Nullable ON [dbo].[USER]([PHONE_NUMBER_2]) WHERE [PHONE_NUMBER_2] IS NOT NULL
GO

-- QUẢN TRỊ - ADMIN
CREATE TABLE [dbo].[ADMIN] (
	[USER_ID] BIGINT NOT NULL,				-- ĐỊNH DANH, DÙNG ĐỂ REFERENCES

	CONSTRAINT [PK_ADMIN] PRIMARY KEY([USER_ID]),
	CONSTRAINT [FK_ADMIN_USER] FOREIGN KEY ([USER_ID]) REFERENCES [USER]([USER_ID]),
)
GO

-- NHÂN VIÊN QUẢN LÝ
CREATE TABLE [dbo].[EMPLOYEE] (
	[USER_ID] BIGINT NOT NULL,				-- ĐỊNH DANH, DÙNG ĐỂ REFERENCES
	[START_DATE] DATE DEFAULT GETDATE(),
	[SALARY] DECIMAL(19, 4),

	CONSTRAINT [PK_EMPLOYEE] PRIMARY KEY([USER_ID]),
	CONSTRAINT [FK_EMPLOYEE_USER] FOREIGN KEY ([USER_ID]) REFERENCES [USER]([USER_ID]),
	--CONSTRAINT [FK_EMPLOYEE_ADMIN] FOREIGN KEY ([MANAGER_ID]) REFERENCES [ADMIN]([USER_ID]),
)
GO

-- STUDENT
CREATE TABLE [dbo].[STUDENT] (
	[USER_ID] BIGINT NOT NULL,				-- ĐỊNH DANH, DÙNG ĐỂ REFERENCES
	
	[STUDENT_ID] VARCHAR(15) NOT NULL,		-- MÃ SỐ SINH VIÊN, KHÔNG DÙNG ĐỂ REFERENCES
	[COLLEGE_ID] INT NOT NULl,				-- TRƯỜNG
	[FACULTY] NVARCHAR(50),					-- KHOA
	[MAJORS] NVARCHAR(50),					-- NGÀNH HỌC

	[INSURANCE_ID] VARCHAR(15) NOT NULL,	-- MÃ SỐ BẢO HIỂM
	
	CONSTRAINT [PK_STUDENT] PRIMARY KEY([USER_ID]),
	CONSTRAINT [FK_STUDENT_USER] FOREIGN KEY ([USER_ID]) REFERENCES [USER]([USER_ID]),
	CONSTRAINT [FK_STUDENT_COLLEGE] FOREIGN KEY ([COLLEGE_ID]) REFERENCES [COLLEGE]([COLLEGE_ID]),
	CONSTRAINT [FK_STUDENT_INSURANCE] FOREIGN KEY ([INSURANCE_ID]) REFERENCES [INSURANCE]([INSURANCE_ID]),
)
GO
ALTER TABLE dbo.STUDENT ADD [STATUS_REGISTRATION_ROOM] BIT DEFAULT 0

-- THÂN NHÂN
CREATE TABLE [dbo].[RELATIVE] (
	[USER_ID] BIGINT NOT NULL,						-- USER_ID ĐỊNH DANH LẤY USER ĐỂ LƯU THÔNG TIN (ID CỦA NGƯỜI THÂN)
	[RELATIVE_USER_ID] BIGINT NOT NULL,				-- USER_ID CỦA SINH VIÊN/ NHÂN VIÊN/ ADMIN
	[RELATIONSHIP] NVARCHAR(20),					-- QUAN HỆ
	
	CONSTRAINT [PK_RELATIVE] PRIMARY KEY([USER_ID], [RELATIVE_USER_ID]),
	CONSTRAINT [FK_RELATIVE_USER] FOREIGN KEY ([USER_ID]) REFERENCES [USER]([USER_ID]),
	CONSTRAINT [FK_RELATIVE_USER_DESC] FOREIGN KEY ([RELATIVE_USER_ID]) REFERENCES [USER]([USER_ID]),
)
GO

-- KHU VỰC
CREATE TABLE [dbo].[SECTOR] (
	[SECTOR_ID] VARCHAR(10) NOT NULL,
	[SECTOR_NAME] NVARCHAR(50),

	CONSTRAINT [PK_SECTOR] PRIMARY KEY([SECTOR_ID]), 
)
GO

-- LOẠI PHÒNGG
CREATE TABLE [dbo].[ROOM_TYPE] (
	[ROOM_TYPE_ID] INT IDENTITY(1, 1),
	[ROOM_TYPE_NAME] NVARCHAR(20),
	[PRICE] DECIMAL(19, 4),
	[AREA] DECIMAL(8, 2),				-- DIỆN TÍCH
	[CAPACITY] INT,						-- SỨC CHỨA

	CONSTRAINT [PK_ROOM_TYPE] PRIMARY KEY ([ROOM_TYPE_ID]),
)
GO

-- PHÒNG
CREATE TABLE [dbo].[ROOM] (
	[ROOM_ID] NVARCHAR(10) NOT NULL,
	[SECTOR_ID] VARCHAR(10) NOT NULL,
	[ROOM_TYPE_ID] INT NOT NULL,

	CONSTRAINT [PK_ROOM] PRIMARY KEY ([ROOM_ID]),
	CONSTRAINT [FK_ROOM_SECTOR] FOREIGN KEY ([SECTOR_ID]) REFERENCES [SECTOR]([SECTOR_ID]),
	CONSTRAINT [PK_ROOM_ROOM_TYPE] FOREIGN KEY ([ROOM_TYPE_ID]) REFERENCES [ROOM_TYPE]([ROOM_TYPE_ID]),
)
GO

-- ĐƠN VỊ
CREATE TABLE [dbo].[UNIT] (
	[UNIT_ID] INT IDENTITY(1, 1),
	[UNIT_NAME] NVARCHAR(50),

	CONSTRAINT [PK_UNIT] PRIMARY KEY([UNIT_ID]),
)

-- DỊCH VỤ
CREATE TABLE [dbo].[SERVICE] (
	[SERVICE_ID] INT IDENTITY(1, 1),		-- MÃ DV
	[SERVICE_NAME] NVARCHAR(50),			-- TÊN DV
	[UNIT_ID] INT NOT NULL,					-- 
	[PRICE_PER_UNIT] DECIMAL(19, 4),		-- ĐƠN GIÁ
	[STATUS] BIT DEFAULT 1, 				-- TRẠNG THÁI 1: CÒN, 0: ẨN(XÓA)

	CONSTRAINT [PK_SERVICE] PRIMARY KEY ([SERVICE_ID]),
	CONSTRAINT [FK_SERVICE_UNIT] FOREIGN KEY ([UNIT_ID]) REFERENCES [UNIT]([UNIT_ID]),
)
GO

-- HÓA ĐƠN
CREATE TABLE [dbo].[BILL] (
	[BILL_ID] BIGINT IDENTITY(1, 1),
	[EMPLOYEE_ID] BIGINT NOT NULL,
	[ROOM_ID] NVARCHAR(10) NOT NULL,
	[CREATE_TIME] DATETIME DEFAULT GETDATE(),
	[TOTAL] DECIMAL(19, 4),	

	[SECTOR_ID] VARCHAR(10),
	[STATUS] BIT  DEFAULT 0,
	[MONTH] INT,
	[YEAR] INT,

	CONSTRAINT [PK_BILL] PRIMARY KEY ([BILL_ID]),
	CONSTRAINT [FK_BILL_EMPLOYEE] FOREIGN KEY ([EMPLOYEE_ID]) REFERENCES [EMPLOYEE]([USER_ID]),
	CONSTRAINT [FK_BILL_ROOM] FOREIGN KEY ([ROOM_ID]) REFERENCES [ROOM]([ROOM_ID]),
)
GO

ALTER TABLE [dbo].[BILL] ADD CONSTRAINT [FK_BILL_SECTOR] FOREIGN KEY ([SECTOR_ID]) REFERENCES [SECTOR] ([SECTOR_ID])
GO 


-- CHI TIẾT HÓA ĐƠN
CREATE TABLE [dbo].[BILL_DETAIL] (
	[BILL_DETAIL_ID] BIGINT IDENTITY(1, 1),
	[BILL_ID] BIGINT NOT NULL,
	[SERVICE_ID] INT NOT NULL,
	[OLD_QUANTITY] INT NOT NULL,			-- SỐ CŨ
	[NEW_QUANTITY] INT NOT NULL,			-- SỐ MỚI
	[UNIT_NAME] NVARCHAR(50),
	[TOTAL_COST] DECIMAL(19,4)
	CONSTRAINT [PK_BILL_DETAIL] PRIMARY KEY ([BILL_DETAIL_ID], [BILL_ID]),
	CONSTRAINT [FK_BILL_DETAIL_BILL] FOREIGN KEY ([BILL_ID]) REFERENCES [BILL]([BILL_ID]),
	CONSTRAINT [FK_BILL_DETAIL_SERVICE] FOREIGN KEY ([SERVICE_ID]) REFERENCES [SERVICE]([SERVICE_ID]),
)
GO



-- THANH TOÁN
CREATE TABLE [dbo].[PAYMENT] (
	[PAYMENT_ID] BIGINT IDENTITY(1, 1),				
	[BILL_ID] BIGINT NOT NULL,					 	-- MẢ HÓA ĐƠN
	[EMPLOYEE_ID] BIGINT NOT NULL,					-- MÃ NHÂN VIÊN NHẬN TIỀN
	[PAYING_DATE] DATETIME DEFAULT GETDATE(),		-- NGÀY THANH TOÁN
	[AMOUNT] DECIMAL(19, 4), 						-- SỐ TIỀN

	CONSTRAINT [PK_PAYMENT] PRIMARY KEY ([PAYMENT_ID], [BILL_ID]),
	CONSTRAINT [FK_PAYMENT_BILL] FOREIGN KEY ([BILL_ID]) REFERENCES [BILL]([BILL_ID]),
	CONSTRAINT [FK_PAYMENT_EMPLOYEE] FOREIGN KEY ([EMPLOYEE_ID]) REFERENCES [EMPLOYEE]([USER_ID]),
)
GO

-- ĐĂNG KÍ PHÒNG
CREATE TABLE [dbo].[ROOM_REGISTRATION]
(
	[ROOM_REGISTRATION_ID] BIGINT IDENTITY(1, 1),
	[SSN] VARCHAR(12) NOT NULL,
	[ROOM_ID] NVARCHAR(10) NOT NULL,
	[EMPLOYEE_ID] BIGINT NOT NULL,
	[SECTOR_ID] VARCHAR(10) NOT NULL,
	[START_DATE] DATETIME DEFAULT GETDATE(),
	[SEMESTER] INT,
	[ACADEMIC_YEAR] INT,
	[DURATION] NVARCHAR(20),
	[STATUS] BIT DEFAULT 0
	
	CONSTRAINT [PK_ROOM_REGISTRATION] PRIMARY KEY ([ROOM_REGISTRATION_ID]),
	CONSTRAINT [FK_ROOM_ID] FOREIGN KEY ([ROOM_ID]) REFERENCES [dbo].[ROOM]([ROOM_ID]),
	CONSTRAINT [FK_EMPLOYEE_ID] FOREIGN KEY ([EMPLOYEE_ID]) REFERENCES [dbo].[EMPLOYEE]([USER_ID]),
	CONSTRAINT [FK_SECTOR_ID] FOREIGN KEY ([SECTOR_ID]) REFERENCES [dbo].[SECTOR]([SECTOR_ID]),
)
GO
-- BẢN TẠM BILL
CREATE TABLE [dbo].[TEMPT]
(
	T_Sector_ID VARCHAR(10),
	T_Room_ID NVARCHAR(10),
	T_Month INT,
	T_Year INT
)
GO

----------------------
-- VIEW
----------------------

-- Tạo view tỉnh
CREATE OR ALTER VIEW [V_PROVINCE] AS
	SELECT 
		P.PROVINCE_ID,
		CASE
			WHEN P.PROVINCE_TYPE = 'C' THEN CONCAT(N'Thành phố ', P.PROVINCE_NAME)
			ELSE CONCAT(N'Tỉnh ', P.PROVINCE_NAME)
		END AS PROVINCE_NAME ,
		P.PROVINCE_TYPE
	FROM [dbo].[PROVINCE] AS P
GO

-- Tạo view huyện
CREATE OR ALTER VIEW [V_DISTRICT] AS
	SELECT 
		D.DISTRICT_ID,
		CASE
			WHEN D.DISTRICT_TYPE = 'C' THEN CONCAT(N'Thành phố ', D.DISTRICT_NAME)
			WHEN D.DISTRICT_TYPE = 'D' THEN CONCAT(N'Quận ', D.DISTRICT_NAME)
			WHEN D.DISTRICT_TYPE = 'T' THEN CONCAT(N'Thị xã ', D.DISTRICT_NAME)
			ELSE CONCAT(N'Huyện ', D.DISTRICT_NAME)
		END AS DISTRICT_NAME,
		D.PROVINCE_ID,
		D.DISTRICT_TYPE
	FROM [dbo].[DISTRICT] AS D
GO

-- Tạo view xã, phường
CREATE OR ALTER VIEW [V_COMMUNE] AS
	SELECT 
		C.COMMUNE_ID,
		CASE
			WHEN C.COMMUNE_TYPE = 'T' THEN CONCAT(N'Thị trấn ', C.COMMUNE_NAME)
			WHEN C.COMMUNE_TYPE = 'W' THEN CONCAT(N'Phường ', C.COMMUNE_NAME)
			ELSE CONCAT(N'Xã ', C.COMMUNE_NAME)
		END AS COMMUNE_NAME,
		C.COMMUNE_TYPE,
		C.PRIORITY,
		C.DISTRICT_ID
	FROM [dbo].[COMMUNE] AS C
GO

-- Tạo view địa chỉ
CREATE OR ALTER VIEW [V_ADDRESS] AS
	SELECT A.ADDRESS_ID, A.STREET, P.PROVINCE_NAME, D.DISTRICT_NAME, C.COMMUNE_NAME
	FROM [dbo].[ADDRESS] AS A
		INNER JOIN [dbo].[V_PROVINCE] AS P ON P.PROVINCE_ID = A.PROVINCE_ID
		INNER JOIN [dbo].[V_DISTRICT] AS D ON D.DISTRICT_ID = A.DISTRICT_ID
		INNER JOIN [dbo].[V_COMMUNE] AS C ON C.COMMUNE_ID = A.COMMNUNE_ID
GO

-- Tạo view nhân viên
CREATE OR ALTER VIEW [V_EMPLOYEE] AS
	SELECT 
		U.[USER_ID], 
		U.LAST_NAME, 
		U.FIRST_NAME, 
		CONCAT(U.LAST_NAME, ' ', U.FIRST_NAME) AS [FULL_NAME],
		U.DOB,
		U.GENDER,
		U.SSN,

		A.STREET,
		A.PROVINCE_NAME,
		A.DISTRICT_NAME,
		A.COMMUNE_NAME,

		U.PHONE_NUMBER_1,
		U.PHONE_NUMBER_2,
		U.EMAIL,

		E.[START_DATE],
		E.SALARY

	FROM [dbo].[USER] AS U 
		INNER JOIN [dbo].[V_ADDRESS] AS A ON A.ADDRESS_ID = U.ADDRESS_ID
		INNER JOIN [dbo].[EMPLOYEE] AS E ON E.[USER_ID] = U.[USER_ID]
GO

-- Tạo view sinh viên
CREATE OR ALTER VIEW [V_STUDENT] AS
	SELECT 
		U.[USER_ID], 
		U.LAST_NAME, 
		U.FIRST_NAME, 
		CONCAT(U.LAST_NAME, ' ', U.FIRST_NAME) AS [FULL_NAME],
		U.DOB,
		U.GENDER,
		U.SSN,

		A.STREET,
		A.PROVINCE_NAME,
		A.DISTRICT_NAME,
		A.COMMUNE_NAME,

		U.PHONE_NUMBER_1,
		U.PHONE_NUMBER_2,
		U.EMAIL,

		S.STUDENT_ID,
		C.COLLEGE_NAME,
		S.FACULTY,
		S.MAJORS

	FROM [dbo].[USER] AS U 
		INNER JOIN [dbo].[V_ADDRESS] AS A ON A.ADDRESS_ID = U.ADDRESS_ID
		INNER JOIN [dbo].[STUDENT] AS S ON S.[USER_ID] = U.[USER_ID]
		INNER JOIN [dbo].[COLLEGE] AS C ON C.COLLEGE_ID = S.COLLEGE_ID
GO

-- Tạo view sinh viên general
CREATE OR ALTER VIEW [V_STUDENTGENERAL] AS
	SELECT 
		U.[USER_ID],  
		CONCAT(U.LAST_NAME, ' ', U.FIRST_NAME) AS [FULL_NAME],
		U.DOB,
		U.GENDER,
		U.SSN,


		U.PHONE_NUMBER_1,
		U.EMAIL,

		S.STUDENT_ID,
		C.COLLEGE_NAME

	FROM [dbo].[USER] AS U 
		INNER JOIN [dbo].[V_ADDRESS] AS A ON A.ADDRESS_ID = U.ADDRESS_ID
		INNER JOIN [dbo].[STUDENT] AS S ON S.[USER_ID] = U.[USER_ID]
		INNER JOIN [dbo].[COLLEGE] AS C ON C.COLLEGE_ID = S.COLLEGE_ID
GO

-- Tạo view room regestration
CREATE OR ALTER VIEW [V_ROOM_REGISTRATION] AS
	SELECT 
		RR.ROOM_REGISTRATION_ID AS [Id],
		
		S.SECTOR_NAME AS [Building],
		R.ROOM_ID AS [Room],
		STU.STUDENT_ID AS [Student Id],
		STU.FULL_NAME AS [Student Name],

		E.USER_ID AS [Employee Id],
		E.FULL_NAME AS [Employee Name],

		RR.START_DATE AS [Start date],
		RR.DURATION AS [Duration]
		
	FROM [dbo].[ROOM_REGISTRATION] AS RR
		INNER JOIN [dbo].[SECTOR] AS S ON S.SECTOR_ID = RR.SECTOR_ID
		INNER JOIN [dbo].[ROOM] AS R ON R.ROOM_ID = RR.ROOM_ID
		INNER JOIN (
			SELECT U.SSN, S.STUDENT_ID, CONCAT(U.LAST_NAME, ' ', U.FIRST_NAME) AS FULL_NAME
			FROM [dbo].[STUDENT] AS S 
				INNER JOIN [dbo].[USER] AS U ON U.[USER_ID] = S.[USER_ID]
 		) AS STU ON STU.SSN = RR.SSN
		INNER JOIN (
			SELECT E.[USER_ID], CONCAT(U.LAST_NAME, ' ', U.FIRST_NAME) AS FULL_NAME
			FROM [dbo].[EMPLOYEE] AS E 
				INNER JOIN [dbo].[USER] AS U ON U.[USER_ID] = E.[USER_ID]
		) AS E ON E.USER_ID = RR.EMPLOYEE_ID
GO

-- View bill
CREATE OR ALTER VIEW [V_BILL] AS
	SELECT
		B.BILL_ID AS [Bill Id],
		B.CREATE_TIME AS [Create time],
		B.EMPLOYEE_ID AS [Employee Id],
		CONCAT(U.LAST_NAME, ' ', U.FIRST_NAME) AS [Employee name],
		SEC.SECTOR_NAME AS [Sector],
		B.[MONTH] AS [Month],
		B.[YEAR] AS [Year],
		B.TOTAL AS [Total],
		B.[STATUS] AS [Status]
	FROM [dbo].[BILL] AS B
		INNER JOIN [dbo].[SECTOR] AS SEC ON SEC.SECTOR_ID = B.SECTOR_ID
		INNER JOIN [dbo].[USER] AS U ON U.USER_ID = B.EMPLOYEE_ID
GO

----------------------
-- FUNCTION
----------------------
-- Generate mật khẩu:
CREATE OR ALTER FUNCTION UFN_GenerateMD5 (@OldPass VARCHAR(32))
	RETURNS VARCHAR(32)
AS
BEGIN
	RETURN CONVERT(VARCHAR(32), HashBytes('MD5', @OldPass), 2)
END
GO

-- Hàm lấy mã tỉnh bằng tên tỉnh:
CREATE OR ALTER FUNCTION UFN_GetProvinceIdByProvinceName (@PROVINCE_NAME NVARCHAR(20))
	RETURNS VARCHAR(2)
AS
BEGIN
	DECLARE @PROVINCE_ID VARCHAR(2)
	SELECT @PROVINCE_ID = PROVINCE_ID FROM dbo.PROVINCE WHERE PROVINCE_NAME = @PROVINCE_NAME
	RETURN @PROVINCE_ID
END
GO

-- Hàm lấy mã huyện bằng tên huyện:
CREATE OR ALTER FUNCTION UFN_GetDistrictIdByDictrictName(@DISTRICT_NAME NVARCHAR(40),@PROVINCE_ID VARCHAR(2))
RETURNS VARCHAR(3)
AS
BEGIN
	DECLARE @DISTRICT_ID VARCHAR(3)
	SELECT @DISTRICT_ID = DISTRICT_ID FROM dbo.DISTRICT WHERE DISTRICT_NAME = @DISTRICT_NAME AND PROVINCE_ID = @PROVINCE_ID
	RETURN @DISTRICT_ID
END
GO

-- Hàm tạo mật khẩu mặt định
CREATE OR ALTER FUNCTION UFN_NewPassword(@lastPassword VARCHAR(32), @preFix VARCHAR(4), @size INT)
RETURNS VARCHAR(10)
AS
	BEGIN
	    IF (@lastPassword = '')
			SET @lastPassword = @preFix + REPLICATE(0, @size - LEN(@preFix))
		DECLARE @newPassword VARCHAR(32)
		SET @lastPassword = LTRIM(RTRIM(@lastPassword))
		SET @size = @size - LEN(@preFix)
		SET @newPassword = @preFix + REPLICATE(0, @size - LEN(@preFix))
		RETURN @newPassword
	END
GO


-- Lấy Commune_ID từ Commune_Name----------
CREATE OR ALTER FUNCTION UFN_GetCommuneidByCommuneName
(
	@Commune_Name NVARCHAR(40),
	@Distric_ID VARCHAR(3)
)
RETURNS VARCHAR(3)
AS
BEGIN
	DECLARE @COMMUNE_ID VARCHAR(5)
	SELECT @COMMUNE_ID = COMMUNE_ID FROM dbo.COMMUNE WHERE COMMUNE_NAME = @Commune_Name AND DISTRICT_ID = @Distric_ID
	RETURN @COMMUNE_ID
END
GO


-- Lấy Bill ID -- GET_BILL_ID_BY_SECTORNAME_ROOMID_MONTH_YEAR
CREATE OR ALTER FUNCTION UFN_GetBillIdBySectornameRoomidMonthYear
(
	@Sector_Name VARCHAR(10),
	@Room_ID NVARCHAR(10), 
	@Month INT, 
	@Year INT
)
RETURNS INT
AS
BEGIN
	DECLARE @Sector_ID VARCHAR(10), 
			@Bill_ID INT
	SELECT @Sector_ID = dbo.SECTOR.SECTOR_ID FROM dbo.SECTOR WHERE dbo.SECTOR.SECTOR_NAME = @Sector_Name
	SELECT @Bill_ID = dbo.BILL.BILL_ID FROM dbo.BILL WHERE dbo.BILL.Sector_ID = @Sector_ID
														AND dbo.BILL.ROOM_ID = @Room_ID
														AND dbo.BILL.MONTH = @Month
														AND dbo.BILL.YEAR = @Year 
    RETURN @Bill_ID
END
GO

-- Lấy chỉ số mới của tháng trước đó của Bill 
CREATE OR ALTER FUNCTION [dbo].[UFN_GetOldQuantityForNewBill]
(
	@Sector_ID VARCHAR(10), 
	@Room_ID NVARCHAR(10), 
	@Month INT, @Year INT, 
	@Service_Name NVARCHAR(20)
)
RETURNS INT
AS
BEGIN
	DECLARE @Name NVARCHAR(20), 
			@Quantity INT
	
	SET @Name = @Service_Name
	SELECT @Quantity = dbo.BILL_DETAIL.NEW_QUANTITY
	FROM dbo.BILL 
		INNER JOIN dbo.BILL_DETAIL ON BILL_DETAIL.BILL_ID = BILL.BILL_ID 
		INNER JOIN dbo.SERVICE ON SERVICE.SERVICE_ID = BILL_DETAIL.SERVICE_ID
	WHERE dbo.BILL.Sector_ID = @Sector_ID
	   AND dbo.BILL.ROOM_ID = @Room_ID
	   AND dbo.BILL.MONTH = @Month
	   AND dbo.BILL.YEAR = @Year
	   AND dbo.SERVICE.SERVICE_NAME =  @Service_Name
	
	IF @Quantity IS NULL
		SET @Quantity = 0
	
	RETURN @Quantity
END
GO

--Trả về số lượng sinh viên đã đăng lý vào phòng nào đó
CREATE OR ALTER FUNCTION UFN_CountNumberOfStudentInRoom
(
	@Sector_ID VARCHAR(10),
	@Room_ID NVARCHAR(10)
)
RETURNS INT
AS BEGIN
	DECLARE @Number INT
	SELECT @Number = COUNT(dbo.ROOM_REGISTRATION.SSN)
	FROM dbo.ROOM_REGISTRATION
	WHERE ROOM_REGISTRATION.SECTOR_ID = @Sector_ID
		AND ROOM_REGISTRATION.ROOM_ID = @Room_ID
	RETURN @Number
END
GO

-- Tạo hàm tìm tên gần đúng
CREATE OR ALTER FUNCTION [dbo].[SearchLike] ( @strInput NVARCHAR(4000) ) 
RETURNS NVARCHAR(4000) 
AS 
BEGIN 
	IF @strInput IS NULL RETURN @strInput 
	IF @strInput = '' RETURN @strInput 
	DECLARE @RT NVARCHAR(4000) 
	DECLARE @SIGN_CHARS NCHAR(136) 
	DECLARE @UNSIGN_CHARS NCHAR (136) 
	SET @SIGN_CHARS = N'ăâđêôơưàảãạáằẳẵặắầẩẫậấèẻẽẹéềểễệế ìỉĩịíòỏõọóồổỗộốờởỡợớùủũụúừửữựứỳỷỹỵý 
	ĂÂĐÊÔƠƯÀẢÃẠÁẰẲẴẶẮẦẨẪẬẤÈẺẼẸÉỀỂỄỆẾÌỈĨỊÍ ÒỎÕỌÓỒỔỖỘỐỜỞỠỢỚÙỦŨỤÚỪỬỮỰỨỲỶỸỴÝ' + NCHAR(272)+ NCHAR(208) 
	SET @UNSIGN_CHARS = N'aadeoouaaaaaaaaaaaaaaaeeeeeeeeee iiiiiooooooooooooooouuuuuuuuuuyyyyy 
	AADEOOUAAAAAAAAAAAAAAAEEEEEEEEEEIIIII OOOOOOOOOOOOOOOUUUUUUUUUUYYYYYDD' 
	DECLARE @COUNTER int 
	DECLARE @COUNTER1 INT 
	SET @COUNTER = 1 
	WHILE (@COUNTER <=LEN(@strInput)) 
	BEGIN 
		SET @COUNTER1 = 1 
		WHILE (@COUNTER1 <=LEN(@SIGN_CHARS)+1) 
		BEGIN IF UNICODE(SUBSTRING(@SIGN_CHARS, @COUNTER1,1)) = UNICODE(SUBSTRING(@strInput,@COUNTER ,1) ) 
			BEGIN 
				IF @COUNTER=1 SET @strInput = SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@strInput, @COUNTER+1,LEN(@strInput)-1) 
				ELSE 
				SET @strInput = SUBSTRING(@strInput, 1, @COUNTER-1) +
				SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@strInput, @COUNTER+1,LEN(@strInput)- @COUNTER) 
				BREAK 
			END 
		SET @COUNTER1 = @COUNTER1 +1 
	END 
	SET @COUNTER = @COUNTER +1 END SET @strInput = replace(@strInput,' ','-') 
	RETURN @strInput 
END
GO


-- lấy danh sách sinh viên theo status
-- status = 0 : outgoing, 
-- status = 1 : alive, 
-- status = 2 : all status 

CREATE OR ALTER FUNCTION UFN_GetListStudent (@STATUS INT)
RETURNS @Result TABLE (
	[Id] BIGINT NOT NULL,
	[Full name] NVARCHAR(51) NULL,
	[Date of birth] DATE,
	[Gender] VARCHAR(5),
	[Ssn] VARCHAR(12),
	[Phone number] VARCHAR(15),
	[Email] VARCHAR(40),
	[Student Id] VARCHAR(15) NOT NULL,
	[College] NVARCHAR(100) NOT NULL
)
AS
BEGIN
	INSERT @Result
    SELECT 
		U.[USER_ID] AS [Id],
		CONCAT(U.LAST_NAME, ' ', U.FIRST_NAME) AS [Full name],
		U.DOB AS [Date of birth],
		U.GENDER AS [Gender],
		U.SSN,

		U.PHONE_NUMBER_1 AS [Phone number],
		U.EMAIL AS [Email],

		S.STUDENT_ID AS [Student Id],
		C.COLLEGE_NAME AS [College]

	FROM [dbo].[USER] AS U 
		INNER JOIN [dbo].[V_ADDRESS] AS A ON A.ADDRESS_ID = U.ADDRESS_ID
		INNER JOIN [dbo].[STUDENT] AS S ON S.[USER_ID] = U.[USER_ID]
		INNER JOIN [dbo].[COLLEGE] AS C ON C.COLLEGE_ID = S.COLLEGE_ID
	WHERE U.[STATUS] = @STATUS OR @STATUS = 2

	RETURN
END
GO
-- Trả về giao diện Bill
CREATE OR ALTER FUNCTION UFN_ReturnForViewBillDetail
(
	@Sector_Name VARCHAR(10), 
	@Room_ID NVARCHAR(10), 
	@Month INT, 
	@Year INT)
RETURNS @View_BillDetail TABLE (
	Service_ID INT, 
	ServiceName NVARCHAR(50), 
	Unit_Name NVARCHAR(50), 
	PricePerUnit DECIMAL(19,4), 
	Old_Quantity INT, 
	New_Quantity INT, 
	Total_Cost DECIMAL(19,4),
	Bill_Detail_ID INT, 
	Bill_ID INT)
AS
BEGIN
    DECLARE @Bill_ID INT, @Service_Name NVARCHAR(50)
	SELECT @Bill_ID = dbo.UFN_GetBillIdBySectornameRoomidMonthYear(@Sector_Name,@Room_ID,@Month,@Year)
	INSERT INTO @View_BillDetail
	SELECT dbo.BILL_DETAIL.SERVICE_ID, dbo.SERVICE.SERVICE_NAME, 
	dbo.BILL_DETAIL.UNIT_NAME, dbo.SERVICE.PRICE_PER_UNIT, 
	dbo.BILL_DETAIL.OLD_QUANTITY, 
	dbo.BILL_DETAIL.NEW_QUANTITY, 
	dbo.BILL_DETAIL.TOTAL_COST, 
	dbo.BILL_DETAIL.BILL_DETAIL_ID, 
	dbo.BILL_DETAIL.BILL_ID
	FROM dbo.BILL_DETAIL INNER JOIN dbo.SERVICE ON SERVICE.SERVICE_ID = BILL_DETAIL.SERVICE_ID INNER JOIN 
	dbo.BILL ON BILL.BILL_ID = BILL_DETAIL.BILL_ID
	WHERE dbo.BILL_DETAIL.BILL_ID = @Bill_ID AND dbo.BILL.STATUS = 0
	RETURN
END
GO
-- GetSectorIDBySectorName
CREATE FUNCTION UFN_Get_SectorID_By_SectorName
(@SECTOR_NAME NVARCHAR(50))
RETURNS VARCHAR(10)
AS
BEGIN
    DECLARE @SECTOR_ID VARCHAR(10)
	SELECT @SECTOR_ID = dbo.SECTOR.SECTOR_ID FROM dbo.SECTOR WHERE dbo.SECTOR.SECTOR_NAME = @SECTOR_NAME
	RETURN @SECTOR_ID
END
GO
----------------------
-- PROC
----------------------

-- Dùng để Insert dữ liệu từ file Excel
CREATE OR ALTER PROCEDURE [USP_INSERT_COMMUNE]
	@COMMUNE_ID VARCHAR(5),
	@COMMUNE_NAME NVARCHAR(40),
	@COMMUNE_TYPE VARCHAR(1), 
	@DISTRICT_ID VARCHAR(3),
	@DISTRICT_NAME NVARCHAR(40),
	@DISTRICT_TYPE VARCHAR(1),
	@PROVINCE_ID VARCHAR(2),
	@PROVINCE_NAME NVARCHAR(20),
	@PROVINCE_TYPE VARCHAR(1)
AS BEGIN
	DECLARE @IS_EXITS INT

	-- Kiểm tra tỉnh có tồn tại hay không, nếu không thì insert record mới
	SELECT @IS_EXITS = COUNT(*) FROM [dbo].[PROVINCE] WHERE [PROVINCE_ID] = @PROVINCE_ID
	IF @IS_EXITS = 0
	BEGIN
		INSERT INTO [dbo].[PROVINCE] ([PROVINCE_ID], [PROVINCE_NAME], [PROVINCE_TYPE])
		VALUES (@PROVINCE_ID, @PROVINCE_NAME, @PROVINCE_TYPE)
	END

	-- Kiểm tra huyện có tồn tại hay không, nếu không thì insert record mới
	SELECT @IS_EXITS = COUNT(*) FROM [dbo].DISTRICT WHERE [DISTRICT_ID] = @DISTRICT_ID
	IF @IS_EXITS = 0
	BEGIN
		INSERT INTO [dbo].[DISTRICT] ( [DISTRICT_ID], [DISTRICT_NAME], [DISTRICT_TYPE], [PROVINCE_ID] )
		VALUES (@DISTRICT_ID, @DISTRICT_NAME, @DISTRICT_TYPE, @PROVINCE_ID)
	END

	-- Kiểm tra xã có tồn tại hay không, nếu không thì insert record mới
	SELECT @IS_EXITS = COUNT(*) FROM [dbo].[COMMUNE] WHERE [COMMUNE_ID] = @COMMUNE_ID
	IF @IS_EXITS = 0
	BEGIN
		INSERT INTO [dbo].[COMMUNE] ( [COMMUNE_ID], [COMMUNE_NAME], [COMMUNE_TYPE], [DISTRICT_ID] )
		VALUES (@COMMUNE_ID, @COMMUNE_NAME, @COMMUNE_TYPE, @DISTRICT_ID)
	END
END
GO

-- Dùng để đăng nhập:
CREATE OR ALTER PROC USP_Login
	@USERNAME VARCHAR(16), 
	@PASSWORD VARCHAR(32)
AS
BEGIN
	DECLARE @PASSWORD_GENERATE VARCHAR(32)
	SET @PASSWORD_GENERATE = dbo.UFN_GenerateMD5(@PASSWORD)

	SELECT * FROM dbo.[USER] WHERE USERNAME = @USERNAME COLLATE SQL_Latin1_General_CP1_CS_AS
	AND PASSWORD = @PASSWORD_GENERATE COLLATE SQL_Latin1_General_CP1_CS_AS -- Phân biệt chữ hoa chữ thường
END
GO

-- Dùng để lấy người dùng bằng username.
CREATE OR ALTER PROC USP_GetUserByUsername
	@USERNAME VARCHAR(16)
AS
BEGIN
	SELECT * FROM dbo.[USER] WHERE USERNAME = @USERNAME
END
GO

-- Dùng để lấy người dùng bằng id.
CREATE OR ALTER PROC USP_GetUserById
	@USER_ID BIGINT
AS
BEGIN
	SELECT * FROM dbo.[USER] WHERE USER_ID = @USER_ID
END
GO

-- Dùng để lấy sinh viên bằng id.
CREATE OR ALTER PROC USP_GetStudentById
	@USER_ID BIGINT
AS
BEGIN
	SELECT * FROM dbo.STUDENT WHERE USER_ID = @USER_ID
END
GO

-- Dùng để lấy quản trị viên bằng id.
CREATE OR ALTER PROC USP_GetAdminById
	@USER_ID BIGINT
AS
BEGIN
	SELECT * FROM dbo.ADMIN WHERE USER_ID = @USER_ID
END
GO

-- Dùng để lấy nhân viên bằng id.
CREATE OR ALTER PROC USP_GetEmployeeById
	@USER_ID BIGINT
AS
BEGIN
	SELECT * FROM dbo.EMPLOYEE WHERE USER_ID = @USER_ID
END
GO

-- Dùng để lấy Province.
CREATE OR ALTER PROC USP_GetListProvince
AS
BEGIN
	SELECT * FROM dbo.PROVINCE
END
GO

-- Dùng để lấy quận, huyện bằng tên tỉnh.
CREATE OR ALTER PROC USP_GetListDistrictByProvinceName
	@PROVINCE_NAME NVARCHAR(20)
AS
BEGIN
	DECLARE @PROVINCE_ID VARCHAR(2)
	SET @PROVINCE_ID = dbo.UFN_GetProvinceIdByProvinceName(@PROVINCE_NAME)
	SELECT * FROM dbo.DISTRICT WHERE PROVINCE_ID = @PROVINCE_ID
END
GO

-- Dùng để lấy xã, phường bằng của huyện bằng tỉnh, huyện.
CREATE OR ALTER PROC USP_GetListCommuneByProvinceAndDistrict
	@PROVINCE_NAME NVARCHAR(20),
	@DISTRICT_NAME NVARCHAR(40)
AS
BEGIN
	DECLARE @PROVINCE_ID VARCHAR(2)
	DECLARE @DISTRICT_ID VARCHAR(3)
	SET @PROVINCE_ID = dbo.UFN_GetProvinceIdByProvinceName(@PROVINCE_NAME)
	SET @DISTRICT_ID = dbo.UFN_GetDistrictIdByDictrictName(@DISTRICT_NAME,@PROVINCE_ID)
	SELECT * FROM dbo.COMMUNE WHERE DISTRICT_ID = @DISTRICT_ID
END
GO

-- Dùng để lấy danh sách quản trị viên.
CREATE OR ALTER PROC USP_GetListAdmin
AS
BEGIN
	SELECT * FROM dbo.[USER] WHERE USER_TYPE = 'ADMIN'
END
GO

-- Dùng để thêm nhân viên
CREATE OR ALTER PROC USP_AddEmployee
	@LAST_NAME NVARCHAR(40),
	@FIRST_NAME NVARCHAR(20),
	@DOB DATE,
	@GENDER NVARCHAR(5),
	@SSN VARCHAR(12),
	@PHONE_NUMBER_1 VARCHAR(15),
	@PHONE_NUMBER_2 VARCHAR(15),
	@EMAIL VARCHAR(40),
	@IMAGE_PATH VARCHAR(300),
	@USER_TYPE VARCHAR(10),
	@PROVINCE_NAME NVARCHAR(20),
	@DISTRICT_NAME NVARCHAR(40),
	@COMMUNE_NAME NVARCHAR(40),
	@STREET NVARCHAR(50),
	@STATR_DATE DATE, 
	@SALARY DECIMAL(19,4)
AS
BEGIN
	-- Tạo ra biến
	DECLARE @PROVINCE_ID VARCHAR(2)
	DECLARE @DISTRICT_ID VARCHAR(3)
	DECLARE @COMMUNE_ID VARCHAR(5)
	DECLARE @ADDRESS_ID BIGINT
	DECLARE @USER_ID BIGINT
	-- Gán dữ liệu cho 3 biến
	SET @PROVINCE_ID = dbo.UFN_GetProvinceIdByProvinceName(@PROVINCE_NAME)
	SET @DISTRICT_ID = dbo.UFN_GetDistrictIdByDictrictName(@DISTRICT_NAME,@PROVINCE_ID)
	SELECT @COMMUNE_ID = COMMUNE_ID FROM dbo.COMMUNE WHERE DISTRICT_ID = @DISTRICT_ID AND COMMUNE_NAME = @COMMUNE_NAME
	-- Thêm địa chỉ
	INSERT INTO dbo.[ADDRESS] (STREET,COMMNUNE_ID,DISTRICT_ID,PROVINCE_ID)
	VALUES (@STREET,@COMMUNE_ID,@DISTRICT_ID,@PROVINCE_ID)
	-- Lấy ra mã địa chỉ
	SET @ADDRESS_ID = ( SELECT TOP 1 ADDRESS_ID FROM dbo.[ADDRESS] ORDER BY ADDRESS_ID DESC)
	--Thêm vào bảng User
	INSERT INTO dbo.[USER] (LAST_NAME, FIRST_NAME, DOB, GENDER, SSN, ADDRESS_ID, PHONE_NUMBER_1, PHONE_NUMBER_2, EMAIL, IMAGE_PATH, USERNAME, PASSWORD, USER_TYPE, STATUS)
	VALUES (@LAST_NAME, @FIRST_NAME, @DOB,@GENDER, @SSN,@ADDRESS_ID, @PHONE_NUMBER_1, @PHONE_NUMBER_2, @EMAIL, @IMAGE_PATH, @SSN,'', @USER_TYPE, 1)
	-- Lấy ra User vừa được thêm vào
	SET @USER_ID = (SELECT TOP 1 USER_ID FROM dbo.[USER] ORDER BY USER_ID DESC)
	-- Thêm vào bảng nhân viên
	INSERT INTO dbo.[EMPLOYEE] (USER_ID, START_DATE, SALARY)
	VALUES(@USER_ID, @STATR_DATE, @SALARY)
END
GO
-- Dùng để thay đổi mật khẩu
CREATE OR ALTER PROC USP_ChangePassword
	@USER_ID BIGINT,
	@NEWPASS VARCHAR(32)
AS
BEGIN
	DECLARE @newPassword VARCHAR(32)
	SET @newPassword = dbo.UFN_GenerateMD5(@NEWPASS)
	UPDATE dbo.[USER] SET PASSWORD = @newPassword WHERE USER_ID = @USER_ID
END
GO
-- Lấy danh sách phòng
CREATE OR ALTER PROC [dbo].[USP_GetListRoom]
AS
BEGIN
    SELECT * FROM dbo.ROOM
END
GO
-- Lấy danh sách phòng bằng Sector_Id
CREATE OR ALTER PROC [dbo].[USP_GetListRoomBySectorID]
	@Sector_ID VARCHAR(10)
AS
BEGIN
    SELECT * FROM dbo.ROOM
	WHERE dbo.ROOM.SECTOR_ID = @Sector_ID
END
GO

-- Lấy danh sách khu
CREATE OR ALTER PROC [dbo].[USP_GetListSector]
AS
BEGIN
    SELECT * FROM dbo.SECTOR
END
GO

--Lấy danh sách dịch vụ
CREATE OR ALTER PROC [dbo].[USP_GetListService]
AS
BEGIN
	SELECT * FROM dbo.SERVICE
END
GO

-- Lấy danh sách đơn vị của dịch vụ
CREATE OR ALTER PROC [dbo].[GetUnitByServiceName]
	@Service_name NVARCHAR(60)
AS
BEGIN
    SELECT dbo.UNIT.UNIT_NAME, dbo.UNIT.UNIT_ID
    FROM dbo.SERVICE, dbo.UNIT 
    WHERE dbo.SERVICE.UNIT_ID = dbo.UNIT.UNIT_ID 
		AND SERVICE_NAME = @Service_name
END
GO

-- Dùng để thêm địa chỉ
CREATE OR ALTER PROC [dbo].[USP_INSERT_ADDRESS]
(
	@Street NVARCHAR(50), 
	@Commune_Name NVARCHAR(50), 
	@District_Name NVARCHAR(50),
	@Province_Name NVARCHAR(50)
)
AS
BEGIN
    DECLARE @Commune_ID VARCHAR(5),
			@District_ID VARCHAR(3),
			@Province_ID VARCHAR(2)

	SELECT @Province_ID = dbo.UFN_GetProvinceIdByProvinceName(@Province_Name)
	SELECT @District_ID = dbo.UFN_GetDistrictIdByDictrictName(@District_Name, @Province_ID)
	SELECT @Commune_ID = dbo.UFN_GetCommuneidByCommuneName(@Commune_Name,@District_ID)

	INSERT INTO dbo.ADDRESS (STREET, COMMNUNE_ID, DISTRICT_ID, PROVINCE_ID)
	VALUES (@Street, @Commune_ID, @District_ID, @Province_ID )
END
GO

-- Thêm Bill
CREATE OR ALTER PROC [dbo].[USP_InsetBill]
(
	@Employee_ID BIGINT, 
	@Room_Name NVARCHAR(10), 
	@Sector_Name NVARCHAR(50), 
	@Create_date DATETIME, 
	@Month INT, 
	@Year INT, 
	@Status BIT, 
	@total DECIMAL(19,4)
)
AS
BEGIN
	DECLARE @Room_ID NVARCHAR(10), @Sector_ID VARCHAR(10)
	SELECT @Sector_ID = dbo.SECTOR.SECTOR_ID FROM dbo.SECTOR WHERE dbo.SECTOR.SECTOR_NAME = @Sector_Name

	SELECT @Room_ID = dbo.ROOM.ROOM_ID FROM dbo.ROOM 
	WHERE dbo.ROOM.SECTOR_ID = @Sector_ID
		AND dbo.ROOM.ROOM_ID = @Room_Name 

    INSERT INTO dbo.BILL(EMPLOYEE_ID, ROOM_ID, CREATE_TIME, TOTAL, STATUS, MONTH, YEAR, Sector_ID) 
	VALUES (@Employee_ID, @Room_ID, @Create_date, @total, @Status, @Month, @Year, @Sector_ID)
END
GO

-- Thêm dịch vụ  vào chi tiết hóa đơn
CREATE OR ALTER PROC [dbo].[USP_INSERT_SERVICE_BILL_DETAIL]
(
	@Service_Name NVARCHAR(20), 
	@Quantity INT,
	@Sector_Name VARCHAR(10), 
	@Room_ID NVARCHAR(10),
	@Month INT, 
	@Year INT
)
AS
BEGIN
	DECLARE @Bill_ID BIGINT, 
			@Service_ID INT, 
			@Old_Quantity INT,
			@New_Quantity INT, 
			@Sector_ID NVARCHAR(20)

	SELECT @Bill_ID = (SELECT MAX(dbo.BILL.BILL_ID) FROM dbo.BILL)
	SELECT @Sector_ID = dbo.SECTOR.SECTOR_ID FROM dbo.SECTOR WHERE dbo.SECTOR.SECTOR_NAME = @Sector_Name
	SET @Month = @Month - 1

	IF(@Month = 0)
	BEGIN
	    SET @Month = 12
		SET @Year = @Year -1
	END

	SELECT @Service_ID = dbo.SERVICE.SERVICE_ID FROM dbo.SERVICE WHERE dbo.SERVICE.SERVICE_NAME = @Service_Name
	SET @Old_Quantity = dbo.UFN_get_New_Quantity_For_New_Bill(@Sector_ID,@Room_ID,@Month,@Year,@Service_Name)
	SET @New_Quantity = @Old_Quantity + @Quantity

    INSERT INTO dbo.BILL_DETAIL(BILL_ID, SERVICE_ID, OLD_QUANTITY, NEW_QUANTITY)
	VALUES (@Bill_ID, @Service_ID, @Old_Quantity, @New_Quantity)
END
GO

-- Thanh toán
CREATE OR ALTER PROC [dbo].[USP_INSERT_PAYMENT]
(
	@Employee_ID INT, 
	@Paying_Date DATETIME, 
	@Amount DECIMAL(19,4),
	@Sector_Name VARCHAR(10),
	@Room_ID NVARCHAR(10), 
	@Month INT, 
	@Year INT
)
AS
BEGIN
    DECLARE @Bill_ID INT
	SET @Bill_ID = dbo.UFN_GetBillIdBySectornameRoomidMonthYear(@Sector_Name,@Room_ID,@Month,@Year)

	INSERT INTO dbo.PAYMENT (BILL_ID, EMPLOYEE_ID, PAYING_DATE, AMOUNT)
	VALUES (@Bill_ID, @Employee_ID, @Paying_Date, @Amount)
END
GO

-- Lấy danh sách sinh viên general
CREATE OR ALTER PROC USP_GetListStudentGeneral
AS
BEGIN
	SELECT  * FROM dbo.UFN_GetListStudent(2)
END
GO

-- Lấy danh sách sinh viên general Alive
CREATE OR ALTER PROC USP_GetListStudentGeneralALive
AS
BEGIN
    SELECT  * FROM dbo.UFN_GetListStudent(1)
END
GO

-- Lấy danh sách sinh viên general Alive
CREATE OR ALTER PROC USP_GetListStudentGeneralGoingOut
AS
BEGIN
    SELECT * FROM dbo.UFN_GetListStudent(0)
END
GO

-- Tìm kiếm gần đúng sinh viên bởi userId
CREATE OR ALTER PROC USP_GetListStudentGeneralByUserId(@USER_ID VARCHAR(10))
AS BEGIN

	SELECT * FROM dbo.V_STUDENTGENERAL WHERE dbo.[SearchLike](USER_ID) 
	LIKE N'%' + dbo.[SearchLike](@USER_ID) + '%'
END
GO
-- Tìm kiếm gần đúng sinh viên bởi StudentId
CREATE OR ALTER PROC USP_GetListStudentGeneralByStudentId(@STUDENT_ID VARCHAR(15))
AS BEGIN

	SELECT * FROM dbo.V_STUDENTGENERAL WHERE dbo.[SearchLike](STUDENT_ID) 
	LIKE N'%' + dbo.[SearchLike](@STUDENT_ID) + '%'
END
GO
-- Tìm kiếm gần đúng sinh viên bởi FullName
CREATE OR ALTER PROC USP_GetListStudentGeneralByFullName(@FULL_NAME NVARCHAR(100))
AS BEGIN

	SELECT * FROM dbo.V_STUDENTGENERAL WHERE dbo.[SearchLike](FULL_NAME) 
	LIKE N'%' + dbo.[SearchLike](@FULL_NAME) + '%'
END
GO
-- Tìm kiếm gần đúng sinh viên bởi Gender
CREATE OR ALTER PROC USP_GetListStudentGeneralByGender(@GENDER NVARCHAR(10))
AS BEGIN

	SELECT * FROM dbo.V_STUDENTGENERAL WHERE dbo.[SearchLike](GENDER) 
	LIKE N'%' + dbo.[SearchLike](@GENDER) + '%'
END
GO
-- Tìm kiếm gần đúng sinh viên bởi Ssn
CREATE OR ALTER PROC USP_GetListStudentGeneralBySsn (@SSN VARCHAR(12))
AS BEGIN

	SELECT * FROM dbo.V_STUDENTGENERAL WHERE dbo.[SearchLike](SSN) 
	LIKE N'%' + dbo.[SearchLike](@SSN) + '%'
END
GO
-- Tìm kiếm gần đúng sinh viên bởi Gender
CREATE OR ALTER PROC USP_GetListStudentGeneralByCollegeName(@COLLEGE_NAME NVARCHAR(150))
AS BEGIN

	SELECT * FROM dbo.V_STUDENTGENERAL WHERE dbo.[SearchLike](COLLEGE_NAME) 
	LIKE N'%' + dbo.[SearchLike](@COLLEGE_NAME) + '%'
END
GO
-- Lấy danh sách user
CREATE OR ALTER PROC USP_GetListUser
AS BEGIN
	SELECT * FROM dbo.[USER]
END
GO
-- Lấy danh sách Room_Registration
CREATE OR ALTER PROC USP_GetListRoomRegistration
AS BEGIN
	SELECT * FROM dbo.V_ROOM_REGISTRATION
END
GO
-- Lấy danh sách Room_Registration bằng StudentId
CREATE OR ALTER PROC USP_GetListRoomRegistrationByStudentId(@STUDENT_ID VARCHAR(15))
AS BEGIN
	SELECT * FROM dbo.V_ROOM_REGISTRATION WHERE dbo.[SearchLike]([Student Id]) 
	LIKE N'%' + dbo.[SearchLike](@STUDENT_ID) + '%'
END
GO
-- Lấy danh sách Room_Registration bằng StudentName
CREATE OR ALTER PROC USP_GetListRoomRegistrationByStudentName(@STUDENT_NAME NVARCHAR(100))
AS BEGIN
	SELECT * FROM dbo.V_ROOM_REGISTRATION WHERE dbo.[SearchLike]([Student Name]) 
	LIKE N'%' + dbo.[SearchLike](@STUDENT_NAME) + '%'
END
GO

-- Lấy danh sách Room_Registration bằng Sector và room
CREATE OR ALTER PROC USP_GetListRoomRegistrationBySectorAndRoom(
	@SECTOR_NAME NVARCHAR(50),
	@ROOM_ID NVARCHAR(10)
	)
AS BEGIN
	SELECT * FROM dbo.V_ROOM_REGISTRATION WHERE Building = @SECTOR_NAME AND Room = @ROOM_ID
END
GO
-- Lấy danh sách đơn vị dịch vụ
CREATE OR ALTER PROC [dbo].[USP_GetListServiceUnit]
AS
BEGIN
    SELECT *
	FROM dbo.V_SERVIE_UNIT
	WHERE STATUS = 1
END
GO

-- Lấy danh sách College
CREATE OR ALTER PROC USP_GetListCollege
AS
BEGIN
    SELECT *
	FROM dbo.COLLEGE
END
GO
-- Thêm bảo hiểm
CREATE OR ALTER PROC USP_INSERT_INSURANCE
(@Insurence_ID VARCHAR(15))
AS
BEGIN
    INSERT INTO dbo.INSURANCE
    (
        INSURANCE_ID,
        BASE_PRACTICE,
        REGISTRATION_DATE,
        DURATION
    )
    VALUES
    (   @Insurence_ID,        
        NULL,       
        NULL, 
        NULL
        )
END
GO
--- THÊM USER - STUDENT
CREATE OR ALTER PROC USP_INSERT_USER_STUDENT
(
	@LAST_NAME NVARCHAR(40),
	@FIRST_NAME NVARCHAR(20),
	@DOB DATE,@GENDER NVARCHAR(5),
	@SSN VARCHAR(12),
	@PHONE_NUMBER_1 VARCHAR(15),
	@PHONE_NUMBER_2 VARCHAR(15),
	@EMAIL VARCHAR(40),
	@IMAGE_PATH VARCHAR(300),
	@USER_TYPE VARCHAR(10),
	@STATUS BIT
)
AS
BEGIN
	DECLARE @ADDRESS_ID INT
	SELECT @ADDRESS_ID = (SELECT MAX(ADDRESS_ID) FROM dbo.ADDRESS)
	INSERT INTO dbo.[USER]
	(
	    LAST_NAME,
	    FIRST_NAME,
	    DOB,
	    GENDER,
	    SSN,
	    ADDRESS_ID,
	    PHONE_NUMBER_1,
	    PHONE_NUMBER_2,
	    EMAIL,
	    IMAGE_PATH,
	    USERNAME,
	    PASSWORD,
	    USER_TYPE,
	    STATUS
	)
	VALUES
	(   @LAST_NAME,       -- LAST_NAME - nvarchar(40)
	    @FIRST_NAME,       -- FIRST_NAME - nvarchar(20)
	    @DOB, -- DOB - date
	    @GENDER,       -- GENDER - nvarchar(5)
	    @SSN,        -- SSN - varchar(12)
	    @ADDRESS_ID,         -- ADDRESS_ID - bigint
	    @PHONE_NUMBER_1,        -- PHONE_NUMBER_1 - varchar(15)
	    @PHONE_NUMBER_2,        -- PHONE_NUMBER_2 - varchar(15)
	    @EMAIL,        -- EMAIL - varchar(40)
	    @IMAGE_PATH,        -- IMAGE_PATH - varchar(300)
	    @EMAIL,        -- USERNAME - varchar(16)
	    'student',        -- PASSWORD - varchar(32)
	    @USER_TYPE,        -- USER_TYPE - varchar(10)
	    @STATUS       -- STATUS - bit
	    )
END
GO
-- THÊM SINH VIÊN
CREATE PROC USP_INSERT_STUDENT
(
	@STUDENT_ID VARCHAR(15), 
	@COLLEGE_NAME NVARCHAR(50),
	@FACULTY NVARCHAR(50), 
	@MAJORS NVARCHAR(50),
	@INSURANCE_ID VARCHAR(15),
	@STATUS_REGISTRATION_ROOM BIT
)
AS
BEGIN
    DECLARE @USER_ID BIGINT, @COLLEGE_ID INT
	SELECT @USER_ID = (SELECT MAX(USER_ID) FROM dbo.[USER])
	SELECT @COLLEGE_ID = dbo.COLLEGE.COLLEGE_ID FROM dbo.COLLEGE WHERE dbo.COLLEGE.COLLEGE_NAME = @COLLEGE_NAME
	INSERT INTO dbo.STUDENT
	(
	    USER_ID,
	    STUDENT_ID,
	    COLLEGE_ID,
	    FACULTY,
	    MAJORS,
	    INSURANCE_ID,
	    STATUS_REGISTRATION_ROOM
	)
	VALUES
	(   @USER_ID,   -- USER_ID - bigint
	    @STUDENT_ID,  -- STUDENT_ID - varchar(15)
	    @COLLEGE_ID,   -- COLLEGE_ID - int
	    @FACULTY, -- FACULTY - nvarchar(50)
	    @MAJORS, -- MAJORS - nvarchar(50)
	    @INSURANCE_ID,  -- INSURANCE_ID - varchar(15)
	    @STATUS_REGISTRATION_ROOM -- STATUS_REGISTRATION_ROOM - bit
	    )
END
GO

-- TRANSACTION -- THÊM 1 SINH VIÊN
CREATE OR ALTER PROC TRANS_INSERT_STUDENT
(
	@Street NVARCHAR(50), 
	@Commune_Name NVARCHAR(50), 
	@District_Name NVARCHAR(50),
	@Province_Name NVARCHAR(50),
	@Insurence_ID VARCHAR(15),
	@LAST_NAME NVARCHAR(40),
	@FIRST_NAME NVARCHAR(20),
	@DOB DATE,@GENDER NVARCHAR(5),
	@SSN VARCHAR(12),
	@PHONE_NUMBER_1 VARCHAR(15),
	@PHONE_NUMBER_2 VARCHAR(15),
	@EMAIL VARCHAR(40),
	@IMAGE_PATH VARCHAR(300),
	@USER_TYPE VARCHAR(10),
	@STATUS BIT,
	@STUDENT_ID VARCHAR(15), 
	@COLLEGE_NAME NVARCHAR(50),
	@FACULTY NVARCHAR(50), 
	@MAJORS NVARCHAR(50)
)
AS
BEGIN
	BEGIN TRANSACTION
		CREATE TABLE TEMPT_STUDENT
		(
			T_SSN VARCHAR(12),
			T_INSURANCE_ID VARCHAR(15),
			T_PHONENUMBER1 VARCHAR(15),
			T_PHONENUMBER2 VARCHAR(15),
			T_EMAIL VARCHAR(40)
		)
		INSERT INTO dbo.TEMPT_STUDENT
		(
			T_SSN,
			T_INSURANCE_ID,
			T_PHONENUMBER1,
			T_PHONENUMBER2,
			T_EMAIL
		)
		SELECT dbo.[USER].SSN, dbo.STUDENT.INSURANCE_ID, dbo.[USER].PHONE_NUMBER_1, dbo.[USER].PHONE_NUMBER_2, dbo.[USER].EMAIL
		FROM dbo.[USER] INNER JOIN dbo.STUDENT ON STUDENT.USER_ID = [USER].USER_ID
		EXEC dbo.USP_INSERT_INSURANCE @Insurence_ID = @Insurence_ID 
		EXEC dbo.USP_INSERT_ADDRESS @Street = @Street, 
		                            @Commune_Name = @Commune_Name, 
		                            @District_Name = @District_Name, 
		                            @Province_Name = @Province_Name 
		EXEC dbo.USP_INSERT_USER_STUDENT @LAST_NAME = @LAST_NAME,     -- nvarchar(40)
		                                 @FIRST_NAME = @FIRST_NAME,    -- nvarchar(20)
		                                 @DOB = @DOB,  -- date
		                                 @GENDER = @GENDER,        -- nvarchar(5)
		                                 @SSN = @SSN,            -- varchar(12)
		                                 @PHONE_NUMBER_1 = @PHONE_NUMBER_1, -- varchar(15)
		                                 @PHONE_NUMBER_2 = @PHONE_NUMBER_2, -- varchar(15)
		                                 @EMAIL = @EMAIL,          -- varchar(40)
		                                 @IMAGE_PATH = '',     -- varchar(300)
		                                 @USER_TYPE = @USER_TYPE,      -- varchar(10)
		                                 @STATUS = @STATUS        -- bit
		EXEC dbo.USP_INSERT_STUDENT @STUDENT_ID = @STUDENT_ID,                -- varchar(15)
		                            @COLLEGE_NAME = @COLLEGE_NAME,             -- nvarchar(50)
		                            @FACULTY = @FACULTY,                  -- nvarchar(50)
		                            @MAJORS = @MAJORS,                   -- nvarchar(50)
		                            @INSURANCE_ID = @Insurence_ID,              -- varchar(15)
		                            @STATUS_REGISTRATION_ROOM = 0 -- bit
		
		IF( @SSN IN (SELECT dbo.TEMPT_STUDENT.T_SSN FROM dbo.TEMPT_STUDENT))
		BEGIN
			RAISERROR('SSN Is exist',16,1)
		    ROLLBACK
		END
		ELSE
		BEGIN
			DROP TABLE dbo.TEMPT_STUDENT
			COMMIT
		END	
END
GO
--USP_INSERT_ROOMREGISTRATION
CREATE PROC USP_INSERT_ROOMREGISTRATION
(
	@EMPLOYEE_ID BIGINT, 
	@SSN VARCHAR(12), 
	@SECTOR_NAME NVARCHAR(50), 
	@ROOM_ID NVARCHAR(10), 
	@START_DAY DATETIME, 
	@SEMESTER INT, 
	@ACADEMIC_YEAR INT, 
	@DURATION NVARCHAR(20), 
	@STATUS BIT
)
AS
BEGIN
    DECLARE @SECTOR_ID VARCHAR(10)
	SELECT @SECTOR_ID = dbo.UFN_Get_SectorID_By_SectorName(@SECTOR_NAME)
	INSERT INTO dbo.ROOM_REGISTRATION
	(
	    SSN,
	    ROOM_ID,
	    EMPLOYEE_ID,
	    SECTOR_ID,
	    START_DATE,
	    SEMESTER,
	    ACADEMIC_YEAR,
	    DURATION,
	    STATUS
	)
	VALUES
	(   @SSN,
	    @ROOM_ID,
	    @EMPLOYEE_ID, 
	    @SECTOR_ID, 
	    @START_DAY,
	    @SEMESTER,
	    @ACADEMIC_YEAR, 
	    @DURATION,
	    @STATUS
	    )
END
GO
------------TRIGGER----
----------------------
----------------------
-- Thay đổi mật khẩu mặt định
CREATE TRIGGER TRG_DefaultPassword ON [dbo].[USER]
FOR INSERT
AS
	BEGIN
	    DECLARE @lass_USER_ID BIGINT
		DECLARE @newPassword VARCHAR(32)
		SET @lass_USER_ID= ( SELECT TOP 1 USER_ID FROM dbo.[USER] ORDER BY USER_ID DESC)
		SET @newPassword = dbo.UFN_NewPassword('','dbms',32)
		SET @newPassword = dbo.UFN_GenerateMD5(@newPassword)
		UPDATE dbo.[USER] SET PASSWORD = @newPassword WHERE USER_ID = @lass_USER_ID
	END
GO

-- Cập nhật trạng thái tại bẳng hóa đơn bằng 1 (đã thanh toán) -- nếu hóa đơn đó đã thanh toán thì thông báo "this bill has been paid"
CREATE OR ALTER TRIGGER TRG_INSERT_PAYMENT
ON dbo.PAYMENT
FOR INSERT
AS
	DECLARE @Bill_ID INT
	SELECT @Bill_ID = Inserted.BILL_ID FROM Inserted
	IF(@Bill_ID IN (SELECT dbo.BILL.BILL_ID FROM dbo.BILL WHERE dbo.BILL.STATUS = 1))
	BEGIN
	    RAISERROR(N'This bill has been paid',16,1)
		ROLLBACK
	END
	ELSE
	BEGIN
	    UPDATE dbo.BILL
		SET STATUS = 1 WHERE dbo.BILL.BILL_ID = @Bill_ID
	END
GO
-- TRG CHECKBILL
CREATE OR ALTER TRIGGER CheckBill
ON dbo.BILL
FOR INSERT
AS
	DECLARE @Sector_ID VARCHAR(10),
		    @Room_ID NVARCHAR(10),
			@Month INT,
			@Year INT,
			@Old_Sector_Name VARCHAR(10),
			@Old_Room_ID NVARCHAR(10),
			@Old_Month INT,
			@Old_Year INT
	SELECT @Sector_ID = Inserted.Sector_ID FROM Inserted
	SELECT @Room_ID = Inserted.ROOM_ID FROM Inserted
	SELECT @Month = Inserted.MONTH FROM Inserted
	SELECT @Year = Inserted.YEAR FROM Inserted
	IF(@Sector_ID IN (SELECT dbo.TEMPT.T_Sector_ID FROM dbo.TEMPT)
		AND @Room_ID IN (SELECT dbo.TEMPT.T_Room_ID FROM dbo.TEMPT WHERE dbo.TEMPT.T_Sector_ID = @Sector_ID)
		AND @Month IN (SELECT dbo.TEMPT.T_MONTH FROM dbo.TEMPT WHERE dbo.TEMPT.T_Sector_ID = @Sector_ID AND dbo.TEMPT.T_Room_ID = @Room_ID)
		AND @Year IN (SELECT dbo.TEMPT.T_YEAR FROM dbo.TEMPT WHERE dbo.TEMPT.T_Sector_ID = @Sector_ID AND dbo.TEMPT.T_Room_ID = @Room_ID AND dbo.TEMPT.T_MONTH = @Month)
		)
	BEGIN
		RAISERROR(N'Bill Is Exists',16,1)
		ROLLBACK
	END
	ELSE
		BEGIN
				INSERT INTO dbo.TEMPT
				(
					T_Sector_ID,
					T_Room_ID,
					T_Month,
					T_Year
				)
				VALUES
				(   
					@Sector_ID,
					@Room_ID, 
					@Month,
					@Year 
				)
		END
GO
--TRG_INSERT_ROOM_REGISTRATION
CREATE TRIGGER TRG_INSERT_ROOM_REGISTRATION
ON dbo.ROOM_REGISTRATION
FOR INSERT
AS
	DECLARE @SSN VARCHAR(12), @SECTOR_ID VARCHAR(10), @ROOM_ID NVARCHAR(10), @CAPACITY INT, @CURRENT_REGISTRATER INT
	SELECT @SSN = Inserted.SSN FROM Inserted
	SELECT @SECTOR_ID =  Inserted.SECTOR_ID FROM Inserted
	SELECT @ROOM_ID = Inserted.ROOM_ID FROM Inserted
	SELECT @CAPACITY = dbo.ROOM_TYPE.CAPACITY FROM dbo.ROOM INNER JOIN dbo.ROOM_TYPE ON ROOM_TYPE.ROOM_TYPE_ID = ROOM.ROOM_TYPE_ID
												WHERE dbo.ROOM.SECTOR_ID = @SECTOR_ID AND dbo.ROOM.ROOM_ID = @ROOM_ID
	SELECT @CURRENT_REGISTRATER = dbo.CountNumberOfStudentInRoom(@SECTOR_ID,@ROOM_ID)
	IF (@SSN IN (SELECT dbo.[USER].SSN FROM dbo.STUDENT INNER JOIN dbo.[USER] ON [USER].USER_ID = STUDENT.USER_ID
										WHERE dbo.STUDENT.STATUS_REGISTRATION_ROOM = 1))
	BEGIN
	    RAISERROR(N'SSN Is Exist',16,1)
		ROLLBACK
	END
	ELSE IF(@CURRENT_REGISTRATER = @CAPACITY + 1)
	BEGIN
	    RAISERROR(N'ROOM IS FULL',16,1)
		ROLLBACK
	END
	ELSE
	BEGIN
	    DECLARE @USER_ID_UPDATE VARCHAR(12)
		SELECT @USER_ID_UPDATE = dbo.[USER].USER_ID FROM dbo.STUDENT INNER JOIN dbo.[USER] ON [USER].USER_ID = STUDENT.USER_ID
													WHERE dbo.[USER].SSN = @SSN
		UPDATE dbo.STUDENT
		SET STATUS_REGISTRATION_ROOM = 1
		WHERE dbo.STUDENT.USER_ID = @USER_ID_UPDATE
	END
GO
